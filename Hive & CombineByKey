ADD JAR /usr/lib/hive-catalog/lib/hive-catalog-core.jar;

CREATE TABLE `orders_json`(
  `order_date` string COMMENT '', 
  `order_id` int COMMENT '', 
  `order_status` string COMMENT '')
ROW FORMAT SERDE 
  'org.apache.hive.hcatalog.data.JsonSerDe' 
STORED AS TEXTFILE;


CREATE TABLE `orders_csv`(
  `order_date` string COMMENT '', 
  `order_id` int COMMENT '', 
  `order_status` string COMMENT '')
ROW FORMAT SERDE 
  'org.apache.hadoop.hive.serde2.OpenCSVSerde'
STORED AS TEXTFILE;

insert into table orders_csv values('2014-06-15','1233','CLOSED'),('2014-06-15','1234','OPEN');

COMBINEBYKEY:
*******************
import com.databricks.spark.avro._
val ord=sc.textFile("/user/hive/warehouse/sudha.db/order_items/*").map(r=>(r.split(",")(1).toInt,
r.split("")(4).toDouble))

val combineresult=ord.combineByKey((v :Double) => (v, 1),
(acc :(Double,Int), v :Double) => (acc._1 + v, acc._2 + 1),
(acc1 :(Double, Int), acc2 :(Double, Int)) => (acc1._1 + acc2._1, acc1._2 + acc2._2))

result.take(5).foreach(println)

val reduceresult=ord.reduceByKey((a ,v) => (a + v))

val aggresult=ord.aggregateByKey((0.0, 0, 0.0, 0.0))(
(x, y) => (x._1 +y, x._2 +1, math.min(x._1, y), math.max(x._1, y)),
(x, y) => (x._1 + y._1, x._2 + y._2, math.min(x._1, y._1), math.max(x._1, y._1)))



val final=oi.combineByKey((v :(String, Float)) => (v._2, 1),
(x :(Float, Int), v :(String, Float)) => (x._1 + v._2, x._2 + 1),
(x :(Float, Int), y :(Float, Int)) => (x._1 + y._1, x._2 + y._2))



val odf=sqlContext.read.avro("/user/cloudera/problem1/orders")
val idf=sqlContext.read.avro("/user/cloudera/problem1/order-items")
val oidf=odf.join(idf,odf("order_id") === idf("order_item_order_id"))

val oidfj=oidf.map(x=>((x(1).toString,x(3).toString),(x(8).toString.toFloat, x(0).toString)))

val result=oidfj.combineByKey((x: (Float, String)) => (x._1, Set(x._2)),
(x :(Float, Set[String]), y :(Float, String)) => (x._1 + y._1, x._2 +y._2),
(x :(Float, Set[String]), y :(Float, Set[String])) => (x._1+y._1,x._2++y._2))

val oidfj1=oidf.map(x=>((x(1).toString,x(3).toString),(x(8).toString.toFloat)))

val result1=oidfj1.combineByKey((x: Float) => (x, 1),
(x :(Float, Int), y :Float ) => (x._1 + y, x._2 + 1),
(x :(Float, Int), y :(Float, Int)) => (x._1 + y._1, x._2 + y._2))

result1.map(x=>(x._1._1,x._1._2,x._2._1,x._2._2)).take(10).foreach(println)


